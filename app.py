import streamlit as st
from PIL import Image
from io import BytesIO
import os

from services.image_uploader import save_image_locally
from services.groq_vision import analyze_image
from services.outfit_generator import generate_outfits

GROQ_API_KEY = os.getenv("GROQ_API_KEY") or "YOUR_GROQ_API_KEY"

# ------------------- Streamlit UI ----------------------
st.set_page_config(page_title="üëö AI Capsule Wardrobe Curator", layout="centered")
st.title("üëö AI Capsule Wardrobe Curator")
st.markdown("Upload photos of your clothes and get **smart outfit ideas** generated by AI!")

uploaded_files = st.file_uploader("Upload wardrobe images (JPG, JPEG, PNG)", type=["jpg", "jpeg", "png"], accept_multiple_files=True)

if uploaded_files and GROQ_API_KEY:
    with st.spinner("Analyzing wardrobe..."):
        descriptions = []
        for uploaded_file in uploaded_files:
            image = Image.open(uploaded_file).convert("RGB")
            buf = BytesIO()
            image.save(buf, format="PNG")
            image_bytes = buf.getvalue()

            # Save image locally
            local_path = save_image_locally(image_bytes)

            try:
                desc = analyze_image(image_bytes, GROQ_API_KEY)
                descriptions.append(desc)
                st.image(image, caption=desc, use_column_width=True)
                st.markdown(f"*(Saved locally as `{local_path}`)*")
            except Exception as e:
                st.error(f"‚ùå Error analyzing {uploaded_file.name}: {e}")

    if descriptions and st.button("‚ú® Generate Capsule Wardrobe"):
        with st.spinner("Creating fashion combos..."):
            try:
                outfits = generate_outfits(descriptions, GROQ_API_KEY)
                st.subheader("üß• Outfit Suggestions")
                st.markdown(f"```\n{outfits}\n```")
            except Exception as e:
                st.error("‚ùå Failed to generate outfits.")
                st.error(str(e))
else:
    st.info("üëÜ Upload images and ensure GROQ API key is set.")
